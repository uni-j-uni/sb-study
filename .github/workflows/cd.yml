name: CD with Gradle
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_ACTION_TOKEN }}
          submodules: true

      - name: Update submodule
        run: |
          git submodule update --remote

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          SPRING_PROFILES_ACTIVE=prod ./gradlew clean bootjar

      - name: Docker build & push
        run: |
          docker buildx build --platform linux/arm64 -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} --push .


  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            CONTAINER_NAME_BLUE=sbs-springboot-blue
            CONTAINER_NAME_GREEN=sbs-springboot-green
            CURRENT_RUNNING=$(sudo docker ps --filter "name=a1grade-springboot-*" --format "{{.Names}}" | head -n 1)

            # Decide next container
            if [ "$CURRENT_RUNNING" = "$CONTAINER_NAME_BLUE" ]; then
              NEXT_CONTAINER=$CONTAINER_NAME_GREEN
              PORT_MAPPING="-p 8081:${{ secrets.SPRINGBOOT_PORT }}"
            else
              NEXT_CONTAINER=$CONTAINER_NAME_BLUE
              PORT_MAPPING="-p 8080:${{ secrets.SPRINGBOOT_PORT }}"
            fi

            # Pull new image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

            # Stop & remove next container if exists
            sudo docker rm -f $NEXT_CONTAINER || true

            # Run new container
            sudo docker run -d --name $NEXT_CONTAINER \
                --network ${{ secrets.DOCKER_NETWORK }} \
                $PORT_MAPPING \
                ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

            # Wait for app to be healthy (optional: add health checks here)

            # Update nginx or load balancer here if needed
            echo "Switched to $NEXT_CONTAINER"

            # Clean up old container
            sudo docker rm -f $CURRENT_RUNNING || true

            # Remove dangling images
            sudo docker image prune -f