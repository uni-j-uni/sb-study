name: CD with Gradle
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_ACTION_TOKEN }}
          submodules: true

      - name: Update submodule
        run: |
          git submodule update --remote

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: |
          ./gradlew clean bootjar

      - name: Rename JAR file to app.jar
        run: |
          JAR_PATH=$(ls build/libs/*.jar | head -n 1)
          mv "$JAR_PATH" build/libs/app.jar

      - name: Check built JAR file
        run: ls -lh build/libs

      - name: Create application-local.properties
        run: |
          mkdir -p sb-study-config
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > sb-study-config/application-dev.properties

      - name: Docker build & push
        run: |
          docker buildx build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} --push .


  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            CONTAINER_NAME=sb-study

            # Pull new image
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

            # Stop and remove old container if exists
            sudo docker rm -f $CONTAINER_NAME || true

            # Run new container
            sudo docker run -d --name $CONTAINER_NAME \
              -p 8080:${{ secrets.SPRINGBOOT_PORT }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}

            # Remove dangling images
            sudo docker image prune -f